# -*- coding: utf-8 -*-
"""Perbaikan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GfSawYRwY3wB7dO91MctCYSagQAzBBjv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from scipy.stats import skew
import matplotlib.pyplot as plt
import seaborn as sns

# data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/TWTR.csv')
data = pd.read_csv('TWTR.csv')
data

data = data.dropna()
data

print(data.isnull().sum())

data.describe()

# data[['High']].boxplot()
# data[['Low']].boxplot()
# data[['Open']].boxplot()
# data[['Close']].boxplot()
data[['Volume']].boxplot()
# data[['Adj Close']].boxplot()
plt.title("BoxPlot")
plt.show()

sns.histplot(data['Volume'])
plt.show()

skew=data['Volume'].skew()
print("Skewness:", skew)

# Menghitung Z-score untuk kolom Volume
data['Volume_zscore'] = (data['Volume'] - data['Volume'].mean()) / data['Volume'].std()

# Menentukan threshold untuk mendeteksi outlier (biasanya menggunakan 3 atau -3)
threshold = 3

# Menemukan data yang merupakan outlier
outliers = data[np.abs(data['Volume_zscore']) > threshold]

# Menampilkan outlier
print(outliers)

from scipy.stats import mstats

# Menentukan batas bawah dan atas Winsorizing (misalnya 5% dan 95%)
lower_limit = 0.05
upper_limit = 0.95

# Menerapkan Winsorizing pada kolom Volume
data['Volume_winsorized'] = mstats.winsorize(data['Volume'], limits=[lower_limit, 1 - upper_limit])

# Menampilkan semua data setelah Winsorizing
print(data[['Volume', 'Volume_winsorized']])

from scipy import stats

# Pastikan bahwa tidak ada nilai 0 atau negatif dalam kolom Volume
# Jika ada, tambahkan sedikit nilai konstan (misalnya, 1) agar semua nilai positif
data['Volume'] = data['Volume'].replace(0, 1)

# Menerapkan Box-Cox transformation pada kolom Volume
data['Volume_boxcox'], fitted_lambda = stats.boxcox(data['Volume'])

# Menampilkan lambda hasil transformasi
print(f"Lambda hasil Box-Cox: {fitted_lambda}")

# Menampilkan hasil transformasi
print(data[['Volume', 'Volume_boxcox']].head())

data[['Volume']].boxplot()
plt.title("BoxPlot")
plt.show()

scaler = MinMaxScaler()

volume_data = data[['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']]

scaled_data = scaler.fit_transform(volume_data)
scaled_data_df = pd.DataFrame(scaled_data, columns=['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'])
scaled_data_df